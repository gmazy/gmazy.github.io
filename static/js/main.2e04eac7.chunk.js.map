{"version":3,"sources":["index.js"],"names":["Formi","props","numOfFields","pKysymykset","osaAlue","name","value","persentiiliSarake","csvPersentiili","row","persentiili","trim","replace","split","map","i","forEach","item","length","console","log","fields","Array","fieldSubmittable","fill","type","translated","key","pKys","pKysb","translation","fieldsInfo","includes","pkys","val","ii","state","isInputView","submitDisabled","sums","ageField","results","handleTransition","bind","handleNumberinput","handleChange","handleFocus","handleReset","this","setState","slice","age","evt","target","temp_value","event","newValue","id","isNaN","allFieldsTrue","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","array","number","parseFloat","sisaltopisteet","resultsView","inputView","numberInputs","submittable","text","push","className","onFocus","onChange","autoComplete","tuentarve","persentiiliarvo","sumPoints","tuenTarve","toFixed","onClick","disabled","datab","Arvo","renderLineChart","width","height","data","uv","pv","median","cnt","dataKey","stroke","animationDuration","strokeWidth","dot","strokeDasharray","domain","ticks","tick","fontSize","tickCount","dateNow","src","window","print","React","Component","ReactDOM","render","document","getElementById"],"mappings":"yQAOMA,E,YAGJ,WAAYC,GAAQ,IAAD,sBACjB,IAAIC,EAAc,GACdC,EAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAC7CC,EAAU,CACZ,CACEC,KAAK,QACLC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACzE,CACED,KAAK,UACLC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,KAC1C,CACED,KAAK,QACLC,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,KAC1B,CACED,KAAK,eACLC,MAAO,CAAC,GAAI,GAAI,GAAI,KACtB,CACED,KAAK,gBACLC,MAAO,CAAC,GAAI,MAIZC,EAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,GAI7BC,EAAc,szBA0CdC,EAAM,GACNC,EAAc,IAGlBF,GADAA,GADAA,EAAiBA,EAAeG,OAAOC,QAAQ,KAAM,KACrBC,MAAM,UACNC,KAAI,SAAAC,GAAC,OAAIA,EAAEJ,OAAOE,MAAM,SACzCG,SAAS,SAAAC,GACtBR,EAAM,GACN,IAAI,IAAIM,EAAE,EAAGA,EAAER,EAAkBW,OAAQH,IACvCN,EAAIF,EAAkBQ,IAAME,EAAKF,EAAE,GAAGJ,OAExCD,EAAYO,EAAK,IAAMR,KAEzBU,QAAQC,IAAIV,GAEZR,GAAeC,EAAYe,OAC3B,IAAIG,EAASC,MAAMpB,GACfqB,EAAmBD,MAAMpB,GAAasB,MAAK,GAE/CH,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAChHE,EAAmBD,MAAMpB,GAAasB,MAAK,GAS3C,IANA,IAGIC,EA0BApB,EACAqB,EA9BAC,EAAM,EACNC,GAAO,EACPC,EAAQ,EAERC,EAAc,GACdC,EAAa,GACThB,EAAE,EAAGA,EAAEb,EAAaa,IACvBZ,EAAY6B,SAASL,KAASC,GAC/BA,GAAO,EACPH,EAAO,mBACPI,EAAQ,IAINA,EADC1B,EAAY6B,SAASL,EAAI,GAClB,EAGA,EAEVC,GAAO,EACPD,KAECxB,EAAY6B,SAASL,GAExBI,EAAWhB,GAAK,CAACY,IAAKA,EAAKM,KAAMJ,EAAOJ,KAAMA,EAAMS,IAAKb,EAAON,IAE5Da,IAAOE,EAAYH,GAAOZ,GAMhC,IAAI,IAAIA,EAAE,EAAGA,EAAEX,EAAQc,OAAQH,IAAI,CACjCV,EAAOD,EAAQW,GAAGV,KAClB,IAAI,IAAI8B,EAAG,EAAGA,EAAG/B,EAAQW,GAAGT,MAAMY,OAAQiB,IACxCT,EAAaI,EAAa1B,EAAQW,GAAGT,MAAM6B,IAC3C/B,EAAQW,GAAGT,MAAM6B,GAAMT,EACvBK,EAAWL,GAAYD,KAAOpB,EA/HjB,OAoIjBF,EAAcA,EAAYW,KAAI,SAAAC,GAAC,OAAIe,EAAYf,OAE/C,4CAAMd,KACDmC,MAAQ,CACXC,aAAa,EACbC,gBAAgB,EAChBpC,YAAaA,EACb6B,WAAYA,EACZQ,KAAM,GACNC,SAAU,EACV9B,YAAaA,EACba,iBAAkBA,EAClBkB,QAAS,IAIX,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAExB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBAzJF,E,gFA6JjBK,KAAKC,SAAS,CAACZ,aAAcW,KAAKZ,MAAMC,gB,oCAOxC,IADA,IAAMN,EAAaiB,KAAKZ,MAAML,WAAWmB,QACjCnC,EAAE,EAAGA,EAAEgB,EAAWb,OAAQH,IAChCgB,EAAWhB,GAAGmB,IAAI,GAEpBc,KAAKC,SAAS,CAAClB,WAAYA,IAE3BiB,KAAKC,SAAS,CAAC1B,iBAAkByB,KAAKZ,MAAMb,iBAAiB2B,QAAQ1B,MAAK,KAC1EwB,KAAKC,SAAS,CAACX,gBAAgB,IAE/BU,KAAKC,SAAS,CAACE,IAAK,O,mCAGTC,GACXJ,KAAKC,SAAL,eAAgBG,EAAIC,OAAOhD,KAAO+C,EAAIC,OAAO/C,U,kCAGnC8C,GACV,IAAIE,EAAaF,EAAIC,OAAO/C,MAC5B8C,EAAIC,OAAO/C,MAAQ,GACnB8C,EAAIC,OAAO/C,MAAQgD,I,wCAGHC,GAChB,IAAIC,EAAWD,EAAMF,OAAO/C,MAAMM,QAAQ,SAAU,IAAIsC,OAAO,GAGzDnB,EAAaiB,KAAKZ,MAAML,WAAWmB,QACzCnB,EAAWwB,EAAMF,OAAOI,IAAIvB,IAAMsB,EAElCR,KAAKC,SAAS,CAAClB,WAAYA,IAG3B,IACoBzB,EADdiB,EAAmByB,KAAKZ,MAAMb,iBAAiB2B,QAIrD3B,EAAiBgC,EAAMF,OAAOI,IAFZ,MADEnD,EAG2BkD,KAFtBE,MAAMpD,GAG/B0C,KAAKC,SAAS,CAAC1B,iBAAkBA,IAGjC,IAAIoC,GAAgB,EAlBE,uBAmBtB,YAAcpC,EAAd,+CAAgC,EACvB,IADuB,UACdoC,GAAgB,IApBZ,kFAuBtBX,KAAKC,SAAS,CAACX,gBAAiBqB,M,gCAIhC,IAAIC,EAAQ,IAAIC,KACZC,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KACzCC,EAAKH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAC9CG,EAAOR,EAAMS,cAEjB,OADAT,EAAQE,EAAK,IAAMI,EAAK,IAAME,I,gCAItBE,GAAqB,IAEzBC,EAFW9C,EAAa,uDAAP,OACjBc,EAAO,GAUX,OARA+B,EAAMtD,SAAS,SAAAC,GACmB,qBAAtBsB,EAAKtB,EAAKQ,MAClBc,EAAKtB,EAAKQ,IAAS,GAErB8C,EAASC,WAAWvD,EAAKiB,KACrBwB,MAAMa,KAAWhC,EAAKtB,EAAKQ,KAAU8C,MAGpChC,I,gCAGC7B,GACR,OAAGgD,MAAMc,WAAW9D,IAAuB,IACxCA,GAAa,EAAW,6BACvBA,GAAa,GAAY,iBACzBA,GAAa,GAAY,aAChB,sB,sCAGC+D,EAAetB,GAC7B,MAAsD,qBAA5CH,KAAKZ,MAAM1B,YAAY+D,GAA2C,GACrEzB,KAAKZ,MAAM1B,YAAY+D,GAAgBtB,K,+BAS9C,IALA,IAAIuB,EACAC,EACAC,EAAe,GAGX7D,EAAE,EAAGA,EAAEiC,KAAKZ,MAAML,WAAWb,OAAQH,IAAI,CAC/C,IAAI8D,EAAc7B,KAAKZ,MAAMb,iBAAiBR,GAAK,cAAgB,iBAC/D+D,EAAuC,qBAAhC9B,KAAKZ,MAAML,WAAWhB,GAAGU,KAA4BuB,KAAKZ,MAAML,WAAWhB,GAAGY,IAAI,KAAOqB,KAAKZ,MAAML,WAAWhB,GAAGY,IAAI,IACjIiD,EAAaG,KACb,yBAAKpD,IAAKZ,EAAG0C,GAAI1C,GACf,0BAAMiE,UAAU,UAAUF,GAD5B,IACyC,2BAAOrB,GAAI1C,EAAGU,KAAK,OAAOuD,UAAWH,EAAaI,QAASjC,KAAKF,YAAaoC,SAAUlC,KAAKJ,kBAAmBtC,MAAO0C,KAAKZ,MAAML,WAAWhB,GAAGmB,IAAKiD,aAAa,UAK5M,IAQIC,EACAC,EATA5C,EAAU,GAGVhB,EAAOuB,KAAKsC,UAAUtC,KAAKZ,MAAML,WAAW,QAC5CE,EAAOe,KAAKsC,UAAUtC,KAAKZ,MAAML,WAAW,QAE5C0C,EAAiBhD,EAAI,QAAYA,EAAI,MAAUA,EAAK,iBAAWA,EAAK,gBAAaA,EAAI,MAmCzF,GA9BGuB,KAAKZ,MAAMI,WACZ6C,EAAkBrC,KAAKqC,gBAAgBZ,EAAezB,KAAKZ,MAAMI,UACjE4C,EAAYpC,KAAKuC,UAAUF,IAG7BlE,QAAQC,IAAIa,GAGRe,KAAKZ,MAAME,gBACbG,EAAQsC,KACN,yBAAKpD,IAAI,iBACP,6BADF,iBAEmBF,EAAI,QAFvB,OAEuC,6BAFvC,eAGiBA,EAAI,MAHrB,OAGmC,6BAHnC,uBAImBA,EAAK,iBAJxB,MAIsC,6BAJtC,sBAKqBA,EAAK,gBAL1B,MAK0C,6BAL1C,eAMiBA,EAAI,MANrB,MAMkC,6BANlC,8BAO0BgD,EAP1B,MAO4C,6BAC1C,6BARF,qCASuCxC,EAAK,GAT5C,QASoD,6BATpD,8CAU8CA,EAAK,GAAGA,EAAK,GAAG,KAAKuD,QAAQ,GAAG,6BAC5E,6BAXF,oBAYoBH,EAZpB,IAYqC,6BAZrC,eAaeD,EAAU,6BACvB,+BAMHpC,KAAKZ,MAAMC,YACdsC,EACE,6BACE,yBAAKK,UAAU,aACf,8BAAM,4CAEJ,4BAAQA,UAAU,cAAcvD,KAAK,SAASgE,QAASzC,KAAKD,aAA5D,eAQA,6BACA,yBAAKiC,UAAU,OAAM,sCAArB,IAAiC,2BAAOvD,KAAK,OAAOpB,KAAK,WAAW6E,SAAUlC,KAAKH,aAAcvC,MAAO0C,KAAKZ,MAAMI,SAAU2C,aAAa,SAC1I,yBAAKH,UAAU,gBACZJ,GAGH,4BAAQnD,KAAK,SAASgE,QAASzC,KAAKN,iBAAkBgD,SAAU1C,KAAKZ,MAAME,gBAA3E,cAIDG,OAKA,CAiBH,IAfA,IAcIkD,EAAQ,GACJ5E,EAAE,EAAGA,EAAEiC,KAAKZ,MAAML,WAAWb,OAAQH,IAC3C4E,EAAMZ,KAAK,CAACpD,IAAKZ,EAAGV,KAAM,SAASU,EAAE,GAAI6E,KAAM5C,KAAKZ,MAAML,WAAWhB,KAIvE,IAAM8E,EACJ,6BACA,kBAAC,IAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKC,KAtBjB,CACnB,CACE3F,KAAM,IAAK4F,GAAI,EAAGC,GAAI,EAAGC,OAAQ,GAAIC,IAAK,IAC5C,CACE/F,KAAM,IAAK4F,GAAI,GAAIC,GAAI,GAAIC,OAAQ,GAAIC,IAAK,IAC9C,CACE/F,KAAM,IAAK4F,GAAI,GAAIC,GAAI,GAAIC,OAAQ,GAAIC,IAAK,IAC9C,CACE/F,KAAM,IAAK4F,GAAI,GAAIC,GAAI,GAAIC,OAAQ,GAAIC,IAAK,IAC9C,CACE/F,KAAM,IAAK4F,GAAI,GAAIC,GAAI,GAAIC,OAAQ,GAAIC,IAAK,MAa5C,kBAAC,IAAD,CAAMC,QAAQ,MAAMC,OAAO,UAAUjG,KAAK,aAAUkG,kBAAmB,IAAKC,YAAa,EAAGC,KAAK,IACjG,kBAAC,IAAD,CAAMJ,QAAQ,SAASC,OAAO,UAAUjG,KAAK,WAAWkG,kBAAmB,IAAKC,YAAa,EAAGC,KAAK,IACrG,kBAAC,IAAD,CAAMJ,QAAQ,KAAKC,OAAO,UAAUC,kBAAmB,IAAKC,YAAa,EAAGC,KAAK,IACjF,kBAAC,IAAD,CAAMJ,QAAQ,KAAKC,OAAO,UAAUC,kBAAmB,IAAKC,YAAa,EAAGC,KAAK,IAEjF,kBAAC,IAAD,CAAeH,OAAO,OAAOI,gBAAgB,QAC7C,kBAAC,IAAD,CAAOL,QAAQ,OAAO5E,KAAK,SAASkF,OAAQ,CAAC,IAAK,KAAMC,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAMC,KAAM,CAACC,SAAU,MAEhH,kBAAC,IAAD,CAAOC,UAAW,IAClB,kBAAC,IAAD,OAXF,qDAasC,6BAbtC,2FAcyE,6BAdzE,gEAe0D,6BAC1D,8BAKFrC,EACA,yBAAKM,UAAU,eACb,4BAAQS,QAASzC,KAAKN,kBAAtB,YACA,4CAAqB,6BAFvB,qDAIoD,6BAAM,6BAJ1D,kDAKiD,6BAAM,6BALvD,kBAMeM,KAAKZ,MAAMI,SAAS,6BAAM,6BANzC,qCAOsBQ,KAAKgE,UAAU,6BAClCvE,EACD,6BACA,yBAAKwE,IAAI,cAAc,6BACtBpB,EAED,4BAAQpE,KAAK,SAASgE,QAASyB,OAAOC,OAAtC,WACA,8BAOJ,OACE,6BACGxC,EACAD,O,GArZW0C,IAAMC,WA2Z1BC,IAASC,OAAO,kBAACvH,EAAD,MAAWwH,SAASC,eAAe,U","file":"static/js/main.2e04eac7.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\n//recharts http://recharts.org/en-US/guide/getting-started chartjs?\n\nclass Formi extends React.Component {\n  //_numOfFields = 52; //test\n\n  constructor(props) {\n    let numOfFields = 39; //kysymysten lukumäärä ( 1 kysymys = Kysymys + perustelukysymys )\n    let pKysymykset = [3,4,5,6,7,8,15,18,20,21,22,23,24]; //kysymykset joiden kohdalla on 2 kenttää, kysymys ja perustelu\n    let osaAlue = [//kysymyksen / kysymysparin osa-alue\n      {\n        name:\"KonMT\",\n        value: [5, 6, 7, 8, 9, 10, 15, 18, 19, 20, 30, 31, 32, 33, 34, 37, 38, 39]},\n      {\n        name:\"KonEiMT\",\n        value: [1, 2, 3, 4, 11, 25, 26, 27, 28, 29]},\n      {\n        name:\"Tunne\",\n        value: [21, 22, 23, 24, 35]},\n      {\n        name:\"RelevKäyt\",\n        value: [13, 14, 17, 36]},\n      {\n        name:\"VäärUsk\",\n        value: [12, 16]},\n     ];\n\n    //Persentiilitaulukko\n    let persentiiliSarake = [4,5,6,7,8]; //ikä\n\n\n\n    let csvPersentiili = `\n    1;3;3;3;3;3\n    2;3;3;3;3;3\n    3;3;3;3;3;3\n    4;4;3;3;3;3\n    5;7;3;3;3;3\n    6;11;3;3;3;3\n    7;16;3;3;3;3\n    8;18;3;3;3;3\n    9;25;3;3;3;3\n    10;33;3;3;3;3\n    11;37;3;3;3;3\n    12;44;4;3;3;3\n    13;52;14;4;3;3\n    14;57;16;5;3;3\n    15;64;22;5;3;3\n    16;69;24;6;3;3\n    17;76;28;8;3;3\n    18;80;36;10;3;3\n    19;83;44;11;3;3\n    20;87;48;12;3;3\n    21;90;50;13;3;3\n    22;90;55;14;3;3\n    23;90;57;16;3;3\n    24;90;59;22;5;3\n    25;96;69;24;5;3\n    26;96;76;29;6;3\n    27;97;77;36;9;3\n    28;97;81;37;17;5\n    29;97;86;41;19;7\n    30;97;87;47;28;8\n    31;97;95;64;33;9\n    32;97;97;72;52;10\n    33;97;97;83;63;17\n    34;97;97;87;71;30\n    35;97;97;89;76;39\n    36;97;97;97;82;62\n    37;97;97;97;87;78\n    38;97;97;97;87;91\n    39;97;97;97;87;91\n    40;97;97;97;87;91`;\n    //CSV taulukko js-taulukoksi:\n    let row = {};\n    let persentiili = {};\n    csvPersentiili = csvPersentiili.trim().replace(/ /g, \"\");//remove spaces\n    csvPersentiili = csvPersentiili.split(/\\r?\\n/);//split newlines\n    csvPersentiili = csvPersentiili.map(i => i.trim().split(\";\"))//split \";\"\n    csvPersentiili.forEach( item => {\n      row = {};\n      for(let i=0; i<persentiiliSarake.length; i++){\n        row[persentiiliSarake[i]] = item[i+1].trim();\n      }\n      persentiili[item[0]] = row; \n    });\n    console.log(persentiili);\n\n    numOfFields += pKysymykset.length; //total number of fields \n    let fields = Array(numOfFields); //field values\n    let fieldSubmittable = Array(numOfFields).fill(false);\n    //Testausarvoja:\n    fields = [1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1]; //testausarvoja\n    fieldSubmittable = Array(numOfFields).fill(true);\n\n    //valmistellaan info taulukko jonka pohjalta luodaan kentät, ja translation taulukko\n    let key = 0\n    let pKys = false;\n    let pKysb = 0; //kysymyksen tyyppi 0=kysymys ilman perustelukysymystä, 1, 2 = perustelukysymys\n    let type;\n    let translation = [];\n    let fieldsInfo = [];\n    for(let i=0; i<numOfFields; i++){\n      if(pKysymykset.includes(key) && !pKys) {\n        pKys = true;\n        type = \"Perustelukysymys\";\n        pKysb = 2;\n      }\n      else {\n        if(pKysymykset.includes(key+1)) {\n          pKysb = 1;\n        }\n        else {\n          pKysb = 0;\n        }\n        pKys = false;\n        key++; //samalla key:llä voi olla monta kysymystä, varsinainen ja perustelusk.\n      }\n      if(pKysymykset.includes(key) && !pKys) {\n      }\n      fieldsInfo[i] = {key: key, pkys: pKysb, type: type, val: fields[i]}\n      //luodaan translation taulukko\n      if(!pKys){ translation[key] = i; }\n    }\n\n    let name;\n    let translated;\n    //päivitetään osaAlueet absoluuttisilla kentän numeroilla\n    for(let i=0; i<osaAlue.length; i++){\n      name = osaAlue[i].name;\n      for(let ii=0; ii<osaAlue[i].value.length; ii++){\n        translated = translation[ osaAlue[i].value[ii] ];\n        osaAlue[i].value[ii] = translated\n        fieldsInfo[translated].type = name;\n      }\n    }\n\n    //päivitetään pKysymykset absoluuttisilla kentän numeroilla   \n    pKysymykset = pKysymykset.map(i => translation[i])\n\n    super(props);\n    this.state = {\n      isInputView: true,\n      submitDisabled: true,\n      numOfFields: numOfFields,\n      fieldsInfo: fieldsInfo,\n      sums: [],\n      ageField: 6, \n      persentiili: persentiili,\n      fieldSubmittable: fieldSubmittable,\n      results: \"\",\n    };\n\n\n    this.handleTransition = this.handleTransition.bind(this);\n    //this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleNumberinput = this.handleNumberinput.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n \n  handleTransition(){ //toggle\n    this.setState({isInputView: !this.state.isInputView})\n  }\n\n  handleReset(){\n    //this.setState({fields: Array(this.state.numOfFields).fill(\"\"), results: \"\", submitDisabled: true})\n\n    const fieldsInfo = this.state.fieldsInfo.slice(); //copy array with slice()\n    for(let i=0; i<fieldsInfo.length; i++){\n      fieldsInfo[i].val=\"\";\n    }\n    this.setState({fieldsInfo: fieldsInfo});\n    \n    this.setState({fieldSubmittable: this.state.fieldSubmittable.slice().fill(false)});\n    this.setState({submitDisabled: true});\n\n    this.setState({age: \"\"});\n  }\n\n  handleChange(evt){ \n    this.setState({[evt.target.name]: evt.target.value})\n  }\n\n  handleFocus(evt){ //cursor at the end\n    var temp_value = evt.target.value\n    evt.target.value = ''\n    evt.target.value = temp_value\n  }\n\n  handleNumberinput(event){\n    let newValue = event.target.value.replace(/[^01]/g, '').slice(-1); //keep: 0 1\n\n    //Update changed field value\n    const fieldsInfo = this.state.fieldsInfo.slice(); //copy array with slice()\n    fieldsInfo[event.target.id].val = newValue;\n    //.replace(/[^\\d.-]/g, ''); //keep: digits, comma, -\n    this.setState({fieldsInfo: fieldsInfo}); //toimii ilmankin\n\n    //Update fieldSubmittable true/false\n    const fieldSubmittable = this.state.fieldSubmittable.slice();\n    function checkField(value) {\n      return (value!==\"\" && !isNaN(value))\n    }\n    fieldSubmittable[event.target.id] = checkField(newValue);\n    this.setState({fieldSubmittable: fieldSubmittable}); //update states  \n\n    //Checking full FieldSubmittable array\n    let allFieldsTrue = true\n    for (let i of fieldSubmittable) {\n      if(i===false) { allFieldsTrue = false }\n    }\n    //Enable/disable submit\n    this.setState({submitDisabled: !allFieldsTrue}); \n  }\n\n  dateNow() {\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(0, '0');\n    var mm = String(today.getMonth() + 1).padStart(0, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n    today = dd + '.' + mm + '.' + yyyy;\n    return today\n  }\n  \n  sumPoints(array, type= \"type\"){\n    let sums = []\n    let number;\n    array.forEach( item => {\n      if(typeof(sums[item[type]]) === 'undefined') {\n        sums[item[type]] = 0;\n      }\n      number = parseFloat(item.val);\n      if(!isNaN(number)) { sums[item[type]] += number; }\n      }\n    );\n    return sums;\n  }\n\n  tuenTarve(persentiili){\n    if(isNaN(parseFloat(persentiili))) {return \"-\";}\n    if(persentiili<=6) {return \"Selvästi tuen tarpeessa\";}\n    if (persentiili<=15) {return \"Tuen tarpeessa\";}\n    if (persentiili<=25) {return \"Seurattava\";}\n    else {return \"Ei tuen tarpeessa\";}\n  }\n\n  persentiiliarvo(sisaltopisteet,age){\n    if(typeof(this.state.persentiili[sisaltopisteet]) === 'undefined') { return \"\"; }\n    return this.state.persentiili[sisaltopisteet][age];\n  }\n  \n  render() {\n    let resultsView;\n    let inputView;\n    let numberInputs = [];\n\n    //making fields\n    for(let i=0; i<this.state.fieldsInfo.length; i++){\n      let submittable = this.state.fieldSubmittable[i] ? 'submittable' : 'notsubmittable' ; \n      let text = this.state.fieldsInfo[i].type===\"Perustelukysymys\" ? this.state.fieldsInfo[i].key+'b:' : this.state.fieldsInfo[i].key+':'; \n      numberInputs.push(\n      <div key={i} id={i}>\n        <span className=\"number\">{text}</span> <input id={i} type=\"text\" className={submittable} onFocus={this.handleFocus} onChange={this.handleNumberinput} value={this.state.fieldsInfo[i].val} autoComplete=\"off\"/>\n      </div>\n      )\n    }\n\n    let results = [];\n\n    //laske taulukkoon yhteispisteet kaikille osa-alueille\n    let type = this.sumPoints(this.state.fieldsInfo,\"type\");\n    let pkys = this.sumPoints(this.state.fieldsInfo,\"pkys\");\n   \n    let sisaltopisteet = type[\"KonEiMT\"]+type[\"KonMT\"]+type[\"VäärUsk\"]+type[\"RelevKäyt\"]+type[\"Tunne\"];\n    \n    let tuentarve;\n    let persentiiliarvo;\n    \n    if(this.state.ageField) {\n      persentiiliarvo = this.persentiiliarvo(sisaltopisteet,this.state.ageField);\n      tuentarve = this.tuenTarve(persentiiliarvo);\n    }    \n    \n    console.log(pkys);\n\n    //results, korjaa nan, suhteellisista pisteistä jos kaikki on 0\n    if(!this.state.submitDisabled) {\n      results.push(\n        <div key=\"results-field\">\n          <br />\n          KonEiMT: &nbsp; {type[\"KonEiMT\"]} /10<br />\n          KonMT: &nbsp; {type[\"KonMT\"]} /18<br />\n          VäärUsk: &nbsp; {type[\"VäärUsk\"]} /2<br />\n          RelevKäyt: &nbsp; {type[\"RelevKäyt\"]} /4<br />\n          Tunne: &nbsp; {type[\"Tunne\"]} /5<br />\n          Sisältöpisteet: &nbsp; {sisaltopisteet} /5<br />\n          <br />\n          Perustelukysymysten pisteet: &nbsp; {pkys[2]} /13 <br />\n          Perustelukysymysten suhteelliset pisteet: {(pkys[2]/pkys[1]*100).toFixed(1)}<br />\n          <br />\n          Persentiiliarvo: {persentiiliarvo} <br />\n          Tuen tarve: {tuentarve}<br />\n          <br />\n        </div>\n      )\n    }\n      //Perustelukysymys suhteelliset pisteet: = oikeiden vastausten määrä osioissa, joissa perustelukysymys\n\n    if(this.state.isInputView){ //Aloitusnäkymä\n    inputView = (\n      <div>\n        <div className=\"inputview\">\n        <form><\n          h2>Pragma-testi</h2>\n          <button className=\"resetbutton\" type='button' onClick={this.handleReset}>Tyhjennä</button>\n          {/*<div className=\"maa\">\n            <b>Normiaineisto: </b>\n            <select>\n              <option key=\"maa\" value=\"fi\">Suomi</option>\n            </select>\n            </div>\n          */}   \n          <br />\n          <div className=\"age\"><b>Ikä:</b> <input type=\"text\" name=\"ageField\" onChange={this.handleChange} value={this.state.ageField} autoComplete=\"off\"/></div>\n          <div className=\"numberinputs\">\n            {numberInputs}\n          </div>\n       \n          <button type='button' onClick={this.handleTransition} disabled={this.state.submitDisabled}>Tulostus</button>\n          \n        </form>\n        </div>\n        {results}\n      </div>\n\n    );}\n\n    else { //Tulosnäkymä\n\n      const taulukkoData = [\n        {\n          name: '4', uv: 7, pv: 9, median: 12, cnt: 19,},\n        {\n          name: '5', uv: 14, pv: 16, median: 22, cnt: 28,},\n        {\n          name: '6', uv: 23, pv: 25, median: 31, cnt: 33,},\n        {\n          name: '7', uv: 28, pv: 29, median: 32, cnt: 36,},\n        {\n          name: '8', uv: 33, pv: 33, median: 36, cnt: 37,},\n      ];\n      \n\n      let datab = []\n      for(let i=0; i<this.state.fieldsInfo.length; i++){\n        datab.push({key: i, name: \"Arvo \"+(i+1), Arvo: this.state.fieldsInfo[i]},)\n      }\n      //console.log(datab)\n      \n      const renderLineChart = (\n        <div>\n        <LineChart width={600} height={300} data={taulukkoData}>\n          <Line dataKey=\"cnt\" stroke=\"#fcba03\" name=\"Yläraja\" animationDuration={800} strokeWidth={1} dot={false} />\n          <Line dataKey=\"median\" stroke=\"#808080\" name=\"Mediaani\" animationDuration={800} strokeWidth={1} dot={false} />\n          <Line dataKey=\"pv\" stroke=\"#ff8400\" animationDuration={800} strokeWidth={1} dot={false} />\n          <Line dataKey=\"uv\" stroke=\"#0380fc\" animationDuration={500} strokeWidth={1} dot={false} />\n          \n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"2 2\"/>\n          <XAxis dataKey=\"name\" type=\"number\" domain={[3.5, 8.5]} ticks={[3.5, 4.5, 5.5, 6.5, 7.5, 8.5]} tick={{fontSize: 14}}/>\n\n          <YAxis tickCount={9} />\n          <Tooltip />\n        </LineChart>\n        Mediaanikäyrä (50%:n persentiilikäyrä)<br />\n        Tyypillinen suoritusalue (15 %-85 % persentiilikäyrien väliin jäävä alue)<br />\n        Tyypillisen suoritusalueen alaraja (16 %-25% persentiiliä)<br />\n        <br />\n        </div>\n      );\n\n      \n      resultsView = (\n      <div className=\"resultsView\">\n        <button onClick={this.handleTransition}>Takaisin</button>\n        <h2>Pragma-testi</h2><br />\n\n        Testaajan nimi: __________________________________<br /><br />\n        Lapsen nimi: __________________________________<br /><br />\n        Lapsen ikä: {this.state.ageField}<br /><br />\n        Testauspäivämäärä: {this.dateNow()}<br />\n        {results}\n        <br />\n        <img src=\"chart.png\" /><br />\n        {renderLineChart}\n        \n        <button type='button' onClick={window.print}>Tulosta</button>\n        <br />\n        \n        \n      </div>\n      );\n    }\n\n    return (\n      <div>\n        {inputView}\n        {resultsView}\n      </div>\n    );\n  }\n}\n// ========================================\nReactDOM.render(<Formi />, document.getElementById(\"root\"));\n"],"sourceRoot":""}